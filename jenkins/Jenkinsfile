pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = credentials('DOCKER_REGISTRY')
        DB_PASSWORD     = credentials('DB_PASSWORD')
        GITHUB_USERNAME = credentials('GITHUB_USERNAME')
        DB_NAME         = 'mydb'
        DB_USER         = 'myuser'
        IMAGE_TAG       = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Build & Unit Tests') {
            parallel {
                stage('Customer Service') {
                    steps {
                        dir('customer-service') {
                            sh 'mvn clean test'
                        }
                    }
                }
                stage('Order Service') {
                    steps {
                        dir('order-service') {
                            sh 'mvn clean test'
                        }
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                sh """
                docker build -t ${DOCKER_REGISTRY}/customer-service:${IMAGE_TAG} customer-service
                docker build -t ${DOCKER_REGISTRY}/order-service:${IMAGE_TAG} order-service
                """
            }
        }

//        stage('Push Docker Images') {
//            steps {
//                withCredentials([string(credentialsId: 'GHCR_TOKEN', variable: 'GHCR_TOKEN')]) {
//                    sh """
//                    echo \$GHCR_TOKEN | docker login ghcr.io -u ${GITHUB_USERNAME} --password-stdin
//                    docker push ${DOCKER_REGISTRY}/customer-service:${IMAGE_TAG}
//                    docker push ${DOCKER_REGISTRY}/order-service:${IMAGE_TAG}
//                    """
//                }
//            }
//        }

        stage('Install PostgreSQL to TEST') {
            steps {
                sh """
                helm repo add bitnami https://charts.bitnami.com/bitnami
                helm repo update

                helm upgrade --install postgres bitnami/postgresql \\
                  --namespace test --create-namespace \\
                  --set auth.database=${DB_NAME} \\
                  --set auth.username=${DB_USER} \\
                  --set auth.password=${DB_PASSWORD}
                """
            }
        }

        stage('Create DB Secrets for TEST') {
            steps {
                sh """
                kubectl create secret generic customer-service-customer-db \\
                  --from-literal=password=${DB_PASSWORD} \\
                  -n test --dry-run=client -o yaml | kubectl apply -f -

                kubectl create secret generic order-service-order-db \\
                  --from-literal=password=${DB_PASSWORD} \\
                  -n test --dry-run=client -o yaml | kubectl apply -f -
                """
            }
        }

        stage('Helm Deploy to TEST') {
            steps {
                sh """
                helm upgrade --install customer-service my-microservices-app/charts/customer-service \\
                  --namespace test --create-namespace \\
                  --set image.repository=${DOCKER_REGISTRY}/customer-service \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=customer.test.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install order-service my-microservices-app/charts/order-service \\
                  --namespace test --create-namespace \\
                  --set image.repository=${DOCKER_REGISTRY}/order-service \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=order.test.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
                """
            }
        }

        stage('Manual Approval for PROD') {
            steps {
                input message: 'Deploy to PROD environment?', ok: 'Yes, deploy'
            }
        }

        stage('Install PostgreSQL to PROD') {
            steps {
                sh """
                helm upgrade --install postgres bitnami/postgresql \\
                  --namespace prod --create-namespace \\
                  --set auth.database=${DB_NAME} \\
                  --set auth.username=${DB_USER} \\
                  --set auth.password=${DB_PASSWORD}
                """
            }
        }

        stage('Create DB Secrets for PROD') {
            steps {
                sh """
                kubectl create secret generic customer-service-customer-db \\
                  --from-literal=password=${DB_PASSWORD} \\
                  -n prod --dry-run=client -o yaml | kubectl apply -f -

                kubectl create secret generic order-service-order-db \\
                  --from-literal=password=${DB_PASSWORD} \\
                  -n prod --dry-run=client -o yaml | kubectl apply -f -
                """
            }
        }

        stage('Helm Deploy to PROD') {
            steps {
                sh """
                helm upgrade --install customer-service my-microservices-app/charts/customer-service \\
                  --namespace prod --create-namespace \\
                  --set image.repository=${DOCKER_REGISTRY}/customer-service \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=customer.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install order-service my-microservices-app/charts/order-service \\
                  --namespace prod --create-namespace \\
                  --set image.repository=${DOCKER_REGISTRY}/order-service \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=order.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
                """
            }
        }
    }
}